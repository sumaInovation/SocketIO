

/*
 * WebSocketClientSocketIOack.ino
 *
 *  Created on: 20.07.2019
 *
 */

#include <Arduino.h>
#include <WiFi.h>
#include <WiFiMulti.h>
#include <WiFiClientSecure.h>
#include <ArduinoJson.h>
#include <WebSocketsClient.h>
#include <SocketIOclient.h>
WiFiMulti WiFiMulti;
SocketIOclient socketIO;
const char *ssid = "Dialog 4G 732"; // Enter SSID
const char *password = "5AD445f5";  // Enter Password
// const char *ssid = "Sumangaâ€™s iPhone"; // Enter SSID
// const char *password = "1234";  // Enter Password
#define USE_SERIAL Serial

void socketIOEvent(socketIOmessageType_t type, uint8_t *payload, size_t length)
{
    switch (type)
    {
    case sIOtype_DISCONNECT:
        USE_SERIAL.printf("[IOc] Disconnected!\n");
        break;
    case sIOtype_CONNECT:
        USE_SERIAL.printf("[IOc] Connected to url: %s\n", payload);

        // join default namespace (no auto join in Socket.IO V3)
        socketIO.send(sIOtype_CONNECT, "/");
        break;
    case sIOtype_EVENT:
    {
        //USE_SERIAL.printf(" %s\n", payload);
            
        Serial.printf("%s",payload);
        StaticJsonDocument<256> doc;
        deserializeJson(doc, payload);

        const char *Name = doc["Name"];   // Get sensor type value
        const char *Age = doc["Age"];     // Get sensor type value
        const char *Value = doc["Value"]; // Get timestamp
        USE_SERIAL.printf(Name);                               
    }
    break;
    case sIOtype_ACK:
        USE_SERIAL.printf("[IOc] get ack: %u\n", length);
        break;
    case sIOtype_ERROR:
        USE_SERIAL.printf("[IOc] get error: %u\n", length);
        break;
    case sIOtype_BINARY_EVENT:
        USE_SERIAL.printf("[IOc] get binary: %u\n", length);
        break;
    case sIOtype_BINARY_ACK:
        USE_SERIAL.printf("[IOc] get binary ack: %u\n", length);
        break;
    }
}

void setup()
{
    USE_SERIAL.begin(115200);

    // Serial.setDebugOutput(true);
    USE_SERIAL.setDebugOutput(true);

    USE_SERIAL.println();
    USE_SERIAL.println();
    USE_SERIAL.println();

    for (uint8_t t = 4; t > 0; t--)
    {
        USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
        USE_SERIAL.flush();
        delay(1000);
    }
    WiFi.begin(ssid,password);
   
    while(WiFi.status() != WL_CONNECTED){
        Serial.print(".");
        delay(100);
    }
    
USE_SERIAL.print("WiFi Connected!");
    WiFiMulti.addAP(ssid, password);

    // WiFi.disconnect();
    while (WiFiMulti.run() != WL_CONNECTED)
    {
        delay(100);
    }

    String ip = WiFi.localIP().toString();
    USE_SERIAL.printf("[SETUP] WiFi Connected %s\n", ip.c_str());

    // server address, port and URL
    socketIO.begin("192.168.8.196", 5000, "/socket.io/?EIO=4");

    // event handler
    socketIO.onEvent(socketIOEvent);
}

unsigned long messageTimestamp = 0;
void loop()
{
    socketIO.loop();
    uint64_t now = millis();

    if (now - messageTimestamp > 2000)
    {
        messageTimestamp = now;
        // const char *Data = "{\"Name\":\"Sumanga\",\"Age\":100}";
        // // creat JSON message for Socket.IO (event)
        // DynamicJsonDocument doc(1024);
        // JsonArray array = doc.to<JsonArray>();

        // // add evnet name
        // // Hint: socket.on('event_name', ....
        // array.add("event_name");

        // // add payload (parameters) for the event
        // JsonObject param1 = array.createNestedObject();
        // param1["DATA"] = Data;

        // // JSON to String (serializion)
        // String output;
        // serializeJson(doc, output);

        // // Send event
        // socketIO.sendEVENT(output);


        StaticJsonDocument<1024> doc;
        JsonArray array = doc.to<JsonArray>();
         // add evnet name
        // Hint: socket.on('event_name', ....
        array.add("event_name");
        JsonObject param1 = array.createNestedObject();
        param1["Name"]="Sumanga";
        param1["Age"]=20;
        // JSON to String (serializion)
        String output;
        serializeJson(doc,output);
        // Send event
        socketIO.sendEVENT(output);
        
        USE_SERIAL.print(output);
    }
}
